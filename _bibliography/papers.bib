---
---

@article{nadeem2021sage,
  title={SAGE: Intrusion Alert-driven Attack Graph Extractor},
  author={Nadeem, Azqa and Verwer, Sicco and Moskal, Stephen and Yang, Shanchieh Jay},
  journal={AI-enabled Cybersecurity Analytics (AI4cyber) @ KDD},
  year={2021},
  abstract={Attack graphs (AG) are used to assess pathways availed by cyber adversaries to penetrate a network. State-of-the-art approaches for AG generation focus mostly on deriving dependencies between system vulnerabilities based on network scans and expert knowledge. In real-world operations however, it is costly and ineffective to rely on constant vulnerability scanning and expert-crafted AGs. We propose to automatically learn AGs based on actions observed through intrusion alerts, without prior expert knowledge. Specifically, we develop an unsupervised sequence learning system, SAGE, that leverages the temporal and probabilistic dependence between alerts in a suffix-based probabilistic deterministic finite automaton (S-PDFA) -- a model that accentuates infrequent severe alerts and summarizes paths leading to them. AGs are then derived from the S-PDFA. Tested with intrusion alerts collected through Collegiate Penetration Testing Competition, SAGE produces AGs that reflect the strategies used by participating teams. The resulting AGs are succinct, interpretable, and enable analysts to derive actionable insights, e.g., attackers tend to follow shorter paths after they have discovered a longer one.},
  arxiv={2107.02783},
  selected={true},
  abbr={SAGE},
  code={https://github.com/tudelft-cda-lab/SAGE}
}

@inproceedings{nadeem2021beyond,
  title={Beyond Labeling: Using Clustering to Build Network Behavioral Profiles of Malware Families},
  author={Nadeem, Azqa and Hammerschmidt, Christian and Ganan, Carlos H and Verwer, Sicco},
  booktitle={Malware Analysis Using Artificial Intelligence and Deep Learning},
  editor="Stamp, Mark and Alazab, Mamoun and Shalaginov, Andrii", 
	year={2021},
	publisher="Springer International Publishing",
	address="Cham",
	pages="381--409",
	abstract="Malware family labels are known to be inconsistent. They are also black-box since they do not represent the capabilities of malware. The current state of the art in malware capability assessment includes mostly manual approaches, which are infeasible due to the ever-increasing volume of discovered malware samples. We propose a novel unsupervised machine learning-based method called MalPaCA, which automates capability assessment by clustering the temporal behavior in malware's network traces. MalPaCA provides meaningful behavioral clusters using only 20 packet headers. Behavioral profiles are generated based on the cluster membership of malware's network traces. A Directed Acyclic Graph shows the relationship between malwares according to their overlapping behaviors. The behavioral profiles together with the DAG provide more insightful characterization of malware than current family designations. We also propose a visualization-based evaluation method for the obtained clusters to assist practitioners in understanding the clustering results. We apply MalPaCA on a financial malware dataset collected in the wild that comprises 1.1 k malware samples resulting in 3.6 M packets. Our experiments show that (i) MalPaCA successfully identifies capabilities, such as port scans and reuse of Command and Control servers; (ii) It uncovers multiple discrepancies between behavioral clusters and malware family labels; and (iii) It demonstrates the effectiveness of clustering traces using temporal features by producing an error rate of 8.3{\%}, compared to 57.5{\%} obtained from statistical features.",
	isbn="978-3-030-62582-5",
	doi="10.1007/978-3-030-62582-5_15",
	url="https://doi.org/10.1007/978-3-030-62582-5_15",
  html={https://link.springer.com/chapter/10.1007/978-3-030-62582-5_15},
  pdf={http://pure.tudelft.nl/ws/portalfiles/portal/85997809/Nadeem2021_Chapter_BeyondLabelingUsingClusteringT.pdf},
  selected={true},
  abbr={MalPaCA},
  code={https://github.com/tudelft-cda-lab/malpaca-pub}
}

@inproceedings{verwer2020robust,
author = {Verwer, Sicco and Nadeem, Azqa and Hammerschmidt, Christian and Bliek, Laurens and Al-Dujaili, Abdullah and O'Reilly, Una-May},
title = {The Robust Malware Detection Challenge and Greedy Random Accelerated Multi-Bit Search},
year = {2020},
isbn = {9781450380942},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3411508.3421374},
doi = {10.1145/3411508.3421374},
abstract = {Training classifiers that are robust against adversarially modified examples is becoming
increasingly important in practice. In the field of malware detection, adversaries
modify malicious binary files to seem benign while preserving their malicious behavior.
We report on the results of a recently held robust malware detection challenge. There
were two tracks in which teams could participate: the attack track asked for adversarially
modified malware samples and the defend track asked for trained neural network classifiers
that are robust to such modifications. The teams were unaware of the attacks/defenses
they had to detect/evade. Although only 9 teams participated, this unique setting
allowed us to make several interesting observations.We also present the challenge
winner: GRAMS, a family of novel techniques to train adversarially robust networks
that preserve the intended (malicious) functionality and yield high-quality adversarial
samples. These samples are used to iteratively train a robust classifier. We show
that our techniques, based on discrete optimization techniques, beat purely gradient-based
methods. GRAMS obtained first place in both the attack and defend tracks of the competition.},
booktitle = {Proceedings of the 13th ACM Workshop on Artificial Intelligence and Security (AISec)},
pages = {61–70},
numpages = {10},
location = {Virtual Event, USA},
series = {AISec'20},
  html={https://dl.acm.org/doi/abs/10.1145/3411508.3421374},
  pdf={http://pure.tudelft.nl/ws/files/83427524/GRAMS_draft_2_.pdf},
  selected={true},
  abbr={GRAMS},
  code={https://github.com/tudelft-cda-lab/GRAMS}
}

@inproceedings{roeling2020hybrid,
  title={Hybrid connection and host clustering for community detection in spatial-temporal network data},
  author={Roeling, Mark Patrick and Nadeem, Azqa and Verwer, Sicco},
booktitle="Proceedings of the 2nd Workshop on Machine Learning for Cybersecurity (MLCS)",
editor="Koprinska, Irena and Kamp, Michael and Appice, Annalisa and Loglisci, Corrado and Antonie, Luiza and Zimmermann, Albrecht and Guidotti, Riccardo and {\"O}zg{\"o}bek, {\"O}zlem and Ribeiro, Rita P. and Gavald{\`a}, Ricard and Gama, Jo{\~a}o and Adilova, Linara and Krishnamurthy, Yamuna and Ferreira, Pedro M. and Malerba, Donato and Medeiros, Ib{\'e}ria and Ceci, Michelangelo and Manco, Giuseppe and Masciari, Elio and Ras, Zbigniew W. 
and Christen, Peter and Ntoutsi, Eirini and Schubert, Erich and Zimek, Arthur and Monreale, Anna and Biecek, Przemyslaw and Rinzivillo, Salvatore and Kille, Benjamin and Lommatzsch, Andreas and Gulla, Jon Atle",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="178--204",
abstract="Network data clustering and sequential data mining are large fields of research, but how to combine them to analyze spatial-temporal network data remains a technical challenge. This study investigates a novel combination of two sequential similarity methods (Dynamic Time Warping and N-grams with Cosine distances), with two state-of-the-art unsupervised network clustering algorithms (Hierarchical Density-based Clustering and Stochastic Block Models). A popular way to combine such methods is to first cluster the sequential network data, resulting in connection types. The hosts in the network can then be clustered conditioned on these types. In contrast, our approach clusters nodes and edges in one go, i.e., without giving the output of a first clustering step as input for a second step. We achieve this by implementing sequential distances as covariates for host clustering. While being fully unsupervised, our method outperforms many existing approaches. To the best of our knowledge, the only approaches with comparable performance require manual filtering of connections and feature engineering steps. In contrast, our method is applied to raw network traffic. We apply our pipeline to the problem of detecting infected hosts (network nodes) from logs of unlabelled network traffic (sequential data). On data from the Stratosphere IPS project (CTU-Malware-Capture-Botnet-91), which includes malicious (Conficker botnet) as well as benign hosts, we show that our method perfectly detects peripheral, benign, and malicious hosts in different clusters. We replicate our results in the well-known ISOT dataset (Storm, Waledac, Zeus botnets) with comparable performance: conjointly, 99.97{\%} of nodes were categorized correctly.",
isbn="978-3-030-65965-3",
  html={https://link.springer.com/chapter/10.1007/978-3-030-65965-3_12},
  pdf={http://pure.tudelft.nl/ws/files/83428936/RoelingMP_NadeemA_VerwerS_MLCS2020.pdf},
  selected={true},
  abbr={MalPaCA+SBM}
}